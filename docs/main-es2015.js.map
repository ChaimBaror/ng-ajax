{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/comps/git-db/git-db.component.ts","./src/app/comps/git-db/git-db.component.html","./src/app/comps/git-test/git-test.component.ts","./src/app/comps/git-test/git-test.component.html","./src/app/server/git-db.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ng-ajax';\n}\n","<br>\r\n<app-git-db></app-git-db>\r\n\r\n<br>\r\n<app-git-test></app-git-test>\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { GitDbComponent } from './comps/git-db/git-db.component';\nimport { GitTestComponent } from './comps/git-test/git-test.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GitDbComponent,\n    GitTestComponent\n  ],\n  imports: [\n    BrowserModule ,HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { GitDbService } from 'src/app/server/git-db.service';\n\n@Component({\n  selector: 'app-git-db',\n  templateUrl: './git-db.component.html',\n  styleUrls: ['./git-db.component.css']\n})\nexport class GitDbComponent implements OnInit {\n\n  constructor(private myService: GitDbService) { }\n  keyarr = []\n  dbAjaxContent ={}\n\n\n\n  ngOnInit(): void {\n\n\n        this.myService.httpget().subscribe(strgRes =>\n           this.dbAjaxContent = strgRes);\n           console.log(this. dbAjaxContent);\n           \n\n    // this.myService.httpget(this.myService.urlindex.txt)\n    //   .subscribe(strgRes => this.dbAjaxContent[\"txt\"] = strgRes);\n\n\n    // for (let key in this.myService) {\n    //   this.keyarr.push(key)\n    //   this.myService.httpget(this.myService.urlindex[key])\n    //     .subscribe(strgRes => this.dbAjaxContent[key] = strgRes);\n    //   console.log('this is key' + key);\n    // }\n\n  }\n}","<p>git-db works!</p>\n\n<!-- <div class=\"conter\">\n    <div class=\"col html\" style=\"background-color: coral;\"  [innerHTML] = \"dbAjaxContent.html\"></div>\n    <div class=\"col js\" style=\"background-color: rebeccapurple;\">{{dbAjaxContent.js}} </div>\n    <div class=\"col txt\" style=\"background-color: violet ;\">{{dbAjaxContent.txt}}</div>\n    <div class=\"col json\" style=\"background-color: wheat;\">{{dbAjaxContent.json}}</div>\n</div> -->\n\n<div>\n    <ul >\n        <li *ngFor=\"let x of dbAjaxContent\" >{{x.firstName}} -- {{x.lastName}}</li>\n    </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-git-test',\n  templateUrl: './git-test.component.html',\n  styleUrls: ['./git-test.component.css']\n})\nexport class GitTestComponent implements OnInit {\n\n\n  post: {};\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n\n    this.http.get('https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true').subscribe(po =>\n      this.post = po)\n    console.log(\"wath is this \" + this.post);\n\n  }\n\n}\n","<table class=\"table\">\n    <thead class=\"thead-dark\">\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">ucountry</th>\n        <th scope=\"col\">infected</th>\n        <th scope=\"col\">deceased</th>\n        <th scope=\"col\">tested</th>\n        <th scope=\"col\">last Updated Apify</th>\n      </tr>\n    </thead>\n    <tbody >\n      <tr *ngFor=\"let user of post\">\n        <th scope=\"row\">{{user.id}}</th>\n        <td>{{user.country}}</td>\n        <td>{{user.infected}}</td>\n        <td>{{user.deceased}}</td>\n        <td>{{user.tested}}</td>\n        <td>{{user.lastUpdatedApify}}</td>\n      </tr>\n    </tbody>\n  </table>\n  \n","import { Injectable } from '@angular/core';\nimport { HttpClient }  from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GitDbService {\n\n  // public urlindex = {\n  //   'js'   :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.js', \n  //   'txt'  :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.txt', \n  //   'json' :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.json', \n  //   'html' :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.html', \n  // }\n\n\n  constructor(private http : HttpClient) { }\n\n  httpget() : Observable<any>{\n    return this.http.get<any>('https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.json')\n\n  }\n\n  // httpget(url:string) : Observable<string>{\n  //   return this.http.get<string>(url,{responseType:'text'})\n\n  // }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}