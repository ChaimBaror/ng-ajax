{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/comps/git-db/git-db.component.ts","webpack:///src/app/comps/git-db/git-db.component.html","webpack:///src/app/comps/git-test/git-test.component.ts","webpack:///src/app/comps/git-test/git-test.component.html","webpack:///src/app/server/git-db.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","GitDbComponent","myService","keyarr","dbAjaxContent","httpget","subscribe","strgRes","console","log","GitTestComponent","http","get","po","post","GitDbService","providedIn","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ng-ajax';\n}\n","<br>\r\n<app-git-db></app-git-db>\r\n\r\n<br>\r\n<app-git-test></app-git-test>\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { GitDbComponent } from './comps/git-db/git-db.component';\nimport { GitTestComponent } from './comps/git-test/git-test.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GitDbComponent,\n    GitTestComponent\n  ],\n  imports: [\n    BrowserModule ,HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { GitDbService } from 'src/app/server/git-db.service';\n\n@Component({\n  selector: 'app-git-db',\n  templateUrl: './git-db.component.html',\n  styleUrls: ['./git-db.component.css']\n})\nexport class GitDbComponent implements OnInit {\n\n  constructor(private myService: GitDbService) { }\n  keyarr = []\n  dbAjaxContent ={}\n\n\n\n  ngOnInit(): void {\n\n\n        this.myService.httpget().subscribe(strgRes =>\n           this.dbAjaxContent = strgRes);\n           console.log(this. dbAjaxContent);\n           \n\n    // this.myService.httpget(this.myService.urlindex.txt)\n    //   .subscribe(strgRes => this.dbAjaxContent[\"txt\"] = strgRes);\n\n\n    // for (let key in this.myService) {\n    //   this.keyarr.push(key)\n    //   this.myService.httpget(this.myService.urlindex[key])\n    //     .subscribe(strgRes => this.dbAjaxContent[key] = strgRes);\n    //   console.log('this is key' + key);\n    // }\n\n  }\n}","<p>git-db works!</p>\n\n<!-- <div class=\"conter\">\n    <div class=\"col html\" style=\"background-color: coral;\"  [innerHTML] = \"dbAjaxContent.html\"></div>\n    <div class=\"col js\" style=\"background-color: rebeccapurple;\">{{dbAjaxContent.js}} </div>\n    <div class=\"col txt\" style=\"background-color: violet ;\">{{dbAjaxContent.txt}}</div>\n    <div class=\"col json\" style=\"background-color: wheat;\">{{dbAjaxContent.json}}</div>\n</div> -->\n\n<div>\n    <ul >\n        <li *ngFor=\"let x of dbAjaxContent\" >{{x.firstName}} -- {{x.lastName}}</li>\n    </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-git-test',\n  templateUrl: './git-test.component.html',\n  styleUrls: ['./git-test.component.css']\n})\nexport class GitTestComponent implements OnInit {\n\n\n  post: {};\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n\n    this.http.get('https://api.apify.com/v2/key-value-stores/tVaYRsPHLjNdNBu7S/records/LATEST?disableRedirect=true').subscribe(po =>\n      this.post = po)\n    console.log(\"wath is this \" + this.post);\n\n  }\n\n}\n","<table class=\"table\">\n    <thead class=\"thead-dark\">\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">ucountry</th>\n        <th scope=\"col\">infected</th>\n        <th scope=\"col\">deceased</th>\n        <th scope=\"col\">tested</th>\n        <th scope=\"col\">last Updated Apify</th>\n      </tr>\n    </thead>\n    <tbody >\n      <tr *ngFor=\"let user of post\">\n        <th scope=\"row\">{{user.id}}</th>\n        <td>{{user.country}}</td>\n        <td>{{user.infected}}</td>\n        <td>{{user.deceased}}</td>\n        <td>{{user.tested}}</td>\n        <td>{{user.lastUpdatedApify}}</td>\n      </tr>\n    </tbody>\n  </table>\n  \n","import { Injectable } from '@angular/core';\nimport { HttpClient }  from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GitDbService {\n\n  // public urlindex = {\n  //   'js'   :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.js', \n  //   'txt'  :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.txt', \n  //   'json' :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.json', \n  //   'html' :'https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.html', \n  // }\n\n\n  constructor(private http : HttpClient) { }\n\n  httpget() : Observable<any>{\n    return this.http.get<any>('https://raw.githubusercontent.com/ChaimBaror/ajax/master/db/doc.json')\n\n  }\n\n  // httpget(url:string) : Observable<string>{\n  //   return this.http.get<string>(url,{responseType:'text'})\n\n  // }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}